version: '3.8'

services:
  # Gateway Service - Solo este es accesible externamente
  gateway-service:
    build:
      context: ./maotech_gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DB_URL=${DB_URL}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - microservices.auth-service.url=http://auth-service:8081
      - microservices.user-service.url=http://user-service:8082
      - microservices.course-service.url=http://course-service:8083
      - microservices.content-service.url=http://content-service:8084
    depends_on:
      - auth-service
      - user-service
      - course-service
      - content-service
    networks:
      - microservices-network
    restart: unless-stopped

  # Auth Service - Solo accesible internamente
  auth-service:
    build:
      context: ./maotech_auth-service
      dockerfile: Dockerfile
    expose:
      - "8081"
    environment:
      - DB_URL=${DB_URL}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
    networks:
      - microservices-network
    restart: unless-stopped

  # User Service - Solo accesible internamente
  user-service:
    build:
      context: ./maotech_user-service
      dockerfile: Dockerfile
    expose:
      - "8082"
    environment:
      - DB_URL=${DB_URL}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
    networks:
      - microservices-network
    restart: unless-stopped

  # Course Service - Solo accesible internamente
  course-service:
    build:
      context: ./maotech_course-service
      dockerfile: Dockerfile
    expose:
      - "8083"
    environment:
      - DB_URL=${DB_URL}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
    networks:
      - microservices-network
    restart: unless-stopped

  # Content Service - Solo accesible internamente
  content-service:
    build:
      context: ./maotech_content-service
      dockerfile: Dockerfile
    expose:
      - "8084"
    environment:
      - DB_URL=${DB_URL}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
    networks:
      - microservices-network
    restart: unless-stopped

networks:
  microservices-network:
    driver: bridge